% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.mixnhreg.R
\name{predict.mixnhreg}
\alias{predict.mixnhreg}
\title{Prediction for \pkg{mixnhreg}}
\usage{
\method{predict}{mixnhreg}(object, newdata, type = "parameter", response = 0.5, ...)
}
\arguments{
\item{object}{an object of class \code{mixnhreg}.}

\item{newdata}{a data frame containing the predictors at which predictions should be made.}

\item{type}{type of prediction:
\itemize{
 \item "\code{location}", "\code{scale}", "\code{weight}" returns the respective distribution parameters.
 \item "\code{parameter}" returns a list of all distribution parameters.
 \item "\code{density}" evaluates the probability density function (PDF) at "\code{response}".
 \item "\code{probability}" evaluates the cumulative distribution function (CDF) at "\code{response}".
 \item "\code{quantile}" evaluates the quantile function (QF) at "\code{response}".
 \item "\code{crps}" returns the CRPS of the distribution evaluated at "\code{response}".
 \item "\code{nll}" returns the negative log-likelihood of the distribution evaluated at "\code{response}".
}}

\item{response}{a vector of values needed to evaluate the distribution for a specified \code{type}:
"\code{density}", "\code{probability}", "\code{quantile}", "\code{crps}", "\code{nll}".}

\item{...}{unused.}
}
\value{
a list or data frame of predictions.
}
\description{
This is the main function of \pkg{mixnhreg} to get predictions from an \code{mixnhreg} object.
}
\examples{
# load data
data("station")

# fit mixture normal distribution with two components via BFGS
(fit_optim <- mixnhreg(formula = obs ~ sin1 + cos1 + temp_mean | temp_ctrl,
                       scale.formula = ~ sin1 + cos1 + log(temp_sd) | 1,
                       weight.formula = ~ sin1 + cos1 | 1,
                       data = station,
                       control = control_optim()))

# predict location parameter
location <- predict(fit_optim, type = "location")

# predict all distribution parameter
parameter <- predict(fit_optim, type = "parameter")

# predict negative log-likelihood
nll <- predict(fit_optim, newdata = station, type = "nll", response = station$obs)


}
