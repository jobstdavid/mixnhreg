// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// unlist_cpp
Eigen::VectorXd unlist_cpp(const Rcpp::List& list);
RcppExport SEXP _mixnhreg_unlist_cpp(SEXP listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type list(listSEXP);
    rcpp_result_gen = Rcpp::wrap(unlist_cpp(list));
    return rcpp_result_gen;
END_RCPP
}
// grad_optim_cpp
Eigen::VectorXd grad_optim_cpp(const Rcpp::List& X, const Eigen::MatrixXd& G);
RcppExport SEXP _mixnhreg_grad_optim_cpp(SEXP XSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_optim_cpp(X, G));
    return rcpp_result_gen;
END_RCPP
}
// get_parameter_cpp
Eigen::MatrixXd get_parameter_cpp(const Eigen::MatrixXd& X, const std::string& link, const bool& inverse);
RcppExport SEXP _mixnhreg_get_parameter_cpp(SEXP XSEXP, SEXP linkSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const bool& >::type inverse(inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(get_parameter_cpp(X, link, inverse));
    return rcpp_result_gen;
END_RCPP
}
// get_parameter_optim_cpp
Rcpp::List get_parameter_optim_cpp(const Rcpp::List& X, const Eigen::VectorXd& x, const std::vector<std::string>& links, const int& N, const int& K);
RcppExport SEXP _mixnhreg_get_parameter_optim_cpp(SEXP XSEXP, SEXP xSEXP, SEXP linksSEXP, SEXP NSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type links(linksSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(get_parameter_optim_cpp(X, x, links, N, K));
    return rcpp_result_gen;
END_RCPP
}
// get_parameter_boost_cpp
Rcpp::List get_parameter_boost_cpp(const Rcpp::List& X, const Rcpp::List& x, const std::vector<std::string>& links, const int& N, const int& K);
RcppExport SEXP _mixnhreg_get_parameter_boost_cpp(SEXP XSEXP, SEXP xSEXP, SEXP linksSEXP, SEXP NSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type links(linksSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(get_parameter_boost_cpp(X, x, links, N, K));
    return rcpp_result_gen;
END_RCPP
}
// get_basefits_cpp
Rcpp::List get_basefits_cpp(const Rcpp::List& X, const Rcpp::List& G, const int& N, const int& K);
RcppExport SEXP _mixnhreg_get_basefits_cpp(SEXP XSEXP, SEXP GSEXP, SEXP NSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(get_basefits_cpp(X, G, N, K));
    return rcpp_result_gen;
END_RCPP
}
// update_coef_cpp
Rcpp::List update_coef_cpp(const Eigen::VectorXd& y, const Rcpp::List& X, const Rcpp::List& x, const Rcpp::List& B, const std::vector<std::string>& links, const Rcpp::Function loss_fun, const double& nu, const int& N, const int& K);
RcppExport SEXP _mixnhreg_update_coef_cpp(SEXP ySEXP, SEXP XSEXP, SEXP xSEXP, SEXP BSEXP, SEXP linksSEXP, SEXP loss_funSEXP, SEXP nuSEXP, SEXP NSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type links(linksSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function >::type loss_fun(loss_funSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(update_coef_cpp(y, X, x, B, links, loss_fun, nu, N, K));
    return rcpp_result_gen;
END_RCPP
}
// boost_noncylcic_cpp
Rcpp::List boost_noncylcic_cpp(const Eigen::VectorXd& y, const Rcpp::List& X, Rcpp::List& x, const std::vector<std::string>& links, const Rcpp::Function loss_fun, const Rcpp::Function grad_fun, const Rcpp::Function nll_fun, const double& nu, const int& maxit, const int& N, const int& K);
RcppExport SEXP _mixnhreg_boost_noncylcic_cpp(SEXP ySEXP, SEXP XSEXP, SEXP xSEXP, SEXP linksSEXP, SEXP loss_funSEXP, SEXP grad_funSEXP, SEXP nll_funSEXP, SEXP nuSEXP, SEXP maxitSEXP, SEXP NSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type links(linksSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function >::type loss_fun(loss_funSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function >::type grad_fun(grad_funSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function >::type nll_fun(nll_funSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(boost_noncylcic_cpp(y, X, x, links, loss_fun, grad_fun, nll_fun, nu, maxit, N, K));
    return rcpp_result_gen;
END_RCPP
}
// get_loss_cv_cpp
Eigen::MatrixXd get_loss_cv_cpp(const Eigen::VectorXd& y, const Rcpp::List& X, const Eigen::MatrixXd& x, const std::vector<std::string>& links, const Rcpp::Function loss_fun, const int& maxit, const int& N, const int& K);
RcppExport SEXP _mixnhreg_get_loss_cv_cpp(SEXP ySEXP, SEXP XSEXP, SEXP xSEXP, SEXP linksSEXP, SEXP loss_funSEXP, SEXP maxitSEXP, SEXP NSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type links(linksSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function >::type loss_fun(loss_funSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(get_loss_cv_cpp(y, X, x, links, loss_fun, maxit, N, K));
    return rcpp_result_gen;
END_RCPP
}
// root_finder
double root_finder(const Eigen::VectorXd& location, const Eigen::VectorXd& scale, const Eigen::VectorXd& weight, const double& p, double& xmin, double& xmax, const double& tol);
RcppExport SEXP _mixnhreg_root_finder(SEXP locationSEXP, SEXP scaleSEXP, SEXP weightSEXP, SEXP pSEXP, SEXP xminSEXP, SEXP xmaxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type location(locationSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const double& >::type p(pSEXP);
    Rcpp::traits::input_parameter< double& >::type xmin(xminSEXP);
    Rcpp::traits::input_parameter< double& >::type xmax(xmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(root_finder(location, scale, weight, p, xmin, xmax, tol));
    return rcpp_result_gen;
END_RCPP
}
// dmixnorm_cpp
Eigen::VectorXd dmixnorm_cpp(const Eigen::VectorXd& x, const Eigen::MatrixXd& location, const Eigen::MatrixXd& scale, const Eigen::MatrixXd& weight, const double& log_p);
RcppExport SEXP _mixnhreg_dmixnorm_cpp(SEXP xSEXP, SEXP locationSEXP, SEXP scaleSEXP, SEXP weightSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type location(locationSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const double& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(dmixnorm_cpp(x, location, scale, weight, log_p));
    return rcpp_result_gen;
END_RCPP
}
// pmixnorm_cpp
Eigen::VectorXd pmixnorm_cpp(const Eigen::VectorXd& q, const Eigen::MatrixXd& location, const Eigen::MatrixXd& scale, const Eigen::MatrixXd& weight, const double& log_p, const double& lower_tail);
RcppExport SEXP _mixnhreg_pmixnorm_cpp(SEXP qSEXP, SEXP locationSEXP, SEXP scaleSEXP, SEXP weightSEXP, SEXP log_pSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type location(locationSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const double& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const double& >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(pmixnorm_cpp(q, location, scale, weight, log_p, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// qmixnorm_cpp
Eigen::VectorXd qmixnorm_cpp(const Eigen::VectorXd& p, const Eigen::MatrixXd& location, const Eigen::MatrixXd& scale, const Eigen::MatrixXd& weight, const double& log_p, const double& lower_tail);
RcppExport SEXP _mixnhreg_qmixnorm_cpp(SEXP pSEXP, SEXP locationSEXP, SEXP scaleSEXP, SEXP weightSEXP, SEXP log_pSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type location(locationSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const double& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const double& >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(qmixnorm_cpp(p, location, scale, weight, log_p, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// rmixnorm_cpp
Eigen::VectorXd rmixnorm_cpp(const Eigen::VectorXd& p, const Eigen::MatrixXd& location, const Eigen::MatrixXd& scale, const Eigen::MatrixXd& weight);
RcppExport SEXP _mixnhreg_rmixnorm_cpp(SEXP pSEXP, SEXP locationSEXP, SEXP scaleSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type location(locationSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(rmixnorm_cpp(p, location, scale, weight));
    return rcpp_result_gen;
END_RCPP
}
// logs_mixnorm_cpp
Eigen::VectorXd logs_mixnorm_cpp(const Eigen::VectorXd& x, const Eigen::MatrixXd& location, const Eigen::MatrixXd& scale, const Eigen::MatrixXd& weight);
RcppExport SEXP _mixnhreg_logs_mixnorm_cpp(SEXP xSEXP, SEXP locationSEXP, SEXP scaleSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type location(locationSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(logs_mixnorm_cpp(x, location, scale, weight));
    return rcpp_result_gen;
END_RCPP
}
// crps_mixnorm_cpp
Eigen::VectorXd crps_mixnorm_cpp(const Eigen::VectorXd& x, const Eigen::MatrixXd& location, const Eigen::MatrixXd& scale, const Eigen::MatrixXd& weight);
RcppExport SEXP _mixnhreg_crps_mixnorm_cpp(SEXP xSEXP, SEXP locationSEXP, SEXP scaleSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type location(locationSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(crps_mixnorm_cpp(x, location, scale, weight));
    return rcpp_result_gen;
END_RCPP
}
// grad_logs_mixnorm_cpp
List grad_logs_mixnorm_cpp(const Eigen::VectorXd& x, const Eigen::MatrixXd& location, const Eigen::MatrixXd& scale, const Eigen::MatrixXd& weight);
RcppExport SEXP _mixnhreg_grad_logs_mixnorm_cpp(SEXP xSEXP, SEXP locationSEXP, SEXP scaleSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type location(locationSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_logs_mixnorm_cpp(x, location, scale, weight));
    return rcpp_result_gen;
END_RCPP
}
// grad_crps_mixnorm_cpp
List grad_crps_mixnorm_cpp(const Eigen::VectorXd& x, const Eigen::MatrixXd& location, const Eigen::MatrixXd& scale, const Eigen::MatrixXd& weight);
RcppExport SEXP _mixnhreg_grad_crps_mixnorm_cpp(SEXP xSEXP, SEXP locationSEXP, SEXP scaleSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type location(locationSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_crps_mixnorm_cpp(x, location, scale, weight));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mixnhreg_unlist_cpp", (DL_FUNC) &_mixnhreg_unlist_cpp, 1},
    {"_mixnhreg_grad_optim_cpp", (DL_FUNC) &_mixnhreg_grad_optim_cpp, 2},
    {"_mixnhreg_get_parameter_cpp", (DL_FUNC) &_mixnhreg_get_parameter_cpp, 3},
    {"_mixnhreg_get_parameter_optim_cpp", (DL_FUNC) &_mixnhreg_get_parameter_optim_cpp, 5},
    {"_mixnhreg_get_parameter_boost_cpp", (DL_FUNC) &_mixnhreg_get_parameter_boost_cpp, 5},
    {"_mixnhreg_get_basefits_cpp", (DL_FUNC) &_mixnhreg_get_basefits_cpp, 4},
    {"_mixnhreg_update_coef_cpp", (DL_FUNC) &_mixnhreg_update_coef_cpp, 9},
    {"_mixnhreg_boost_noncylcic_cpp", (DL_FUNC) &_mixnhreg_boost_noncylcic_cpp, 11},
    {"_mixnhreg_get_loss_cv_cpp", (DL_FUNC) &_mixnhreg_get_loss_cv_cpp, 8},
    {"_mixnhreg_root_finder", (DL_FUNC) &_mixnhreg_root_finder, 7},
    {"_mixnhreg_dmixnorm_cpp", (DL_FUNC) &_mixnhreg_dmixnorm_cpp, 5},
    {"_mixnhreg_pmixnorm_cpp", (DL_FUNC) &_mixnhreg_pmixnorm_cpp, 6},
    {"_mixnhreg_qmixnorm_cpp", (DL_FUNC) &_mixnhreg_qmixnorm_cpp, 6},
    {"_mixnhreg_rmixnorm_cpp", (DL_FUNC) &_mixnhreg_rmixnorm_cpp, 4},
    {"_mixnhreg_logs_mixnorm_cpp", (DL_FUNC) &_mixnhreg_logs_mixnorm_cpp, 4},
    {"_mixnhreg_crps_mixnorm_cpp", (DL_FUNC) &_mixnhreg_crps_mixnorm_cpp, 4},
    {"_mixnhreg_grad_logs_mixnorm_cpp", (DL_FUNC) &_mixnhreg_grad_logs_mixnorm_cpp, 4},
    {"_mixnhreg_grad_crps_mixnorm_cpp", (DL_FUNC) &_mixnhreg_grad_crps_mixnorm_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_mixnhreg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
